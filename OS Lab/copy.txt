exp 6 a -> fcfs

#include<stdio.h>
void main() // Main function
{
// Declare variables
int p[30], bt[30], tot_tat = 0, wt[30], n, tot_wt = 0, tat[30];
float awt, avg_tat, avg_wt; // Variables for average calculations

int i;
// Prompt the user to enter the number of processes
printf("\nEnter the No. of Processes: \n");
scanf("%d", &n); // Read the number of processes from the user
// Prompt the user to enter burst times for each process
printf("Enter Burst time for each process:\n");
for(i = 0; i < n; i++) // Loop through each process
{
scanf("%d", &bt[i]); // Read burst time
p[i] = i; // Assign process ID (0, 1, 2,..., n-1)
}
// Display that the FCFS algorithm is being used
printf("\n FCFS Algorithm \n");
// Calculate Turnaround Time (TAT)
for(i = 0; i < n; i++)
{
if(i == 0)
tat[i] = bt[i]; // First process TAT is equal to its Burst Time
else
tat[i] = tat[i - 1] + bt[i]; // Next process TAT = Previous TAT + Current BT
tot_tat = tot_tat + tat[i]; // Sum up Turnaround Time
}
// Calculate Waiting Time (WT)
wt[0] = 0; // First process has no waiting time
for(i = 1; i < n; i++) // Loop from the second process
{
wt[i] = wt[i - 1] + bt[i - 1]; // WT = Previous WT + Previous BT
tot_wt = tot_wt + wt[i]; // Sum up Waiting Time
}
// Display results
printf("\nPROCESS\t\tBURST TIME\tTURN AROUND TIME\tWAITING TIME");
for(i = 0; i < n; i++)
printf("\nprocess[%d]\t\t%d\t\t%d\t\t%d", p[i], bt[i], tat[i], wt[i]);
// Print total turnaround time and average turnaround time
printf("\n\nTotal Turnaround Time: %d", tot_tat);
printf("\nAverage Turnaround Time: %d", tot_tat / n);

// Print total waiting time and average waiting time
printf("\nTotal Waiting Time: %d", tot_wt);
printf("\nAverage Waiting Time: %d\n", tot_wt / n);
}


exp6b -> sjfs	

 #include <stdio.h>
void swap(int *a, int *b);
int main() {
int i, j, n, tot_tat = 0, tot_wt = 0;
int p[30], bt[30], tat[30], wt[30];
float avg_tat, avg_wt;
printf("Enter the no.of processes: ");
scanf("%d", &n);
printf("Enter burst time for each process:\n");
for(i = 0; i < n; i++) {
scanf("%d", &bt[i]);
p[i] = i;
}
// Sorting for SJF
for(i = 0; i < n; i++) {
for(j = i + 1; j < n; j++) {
if(bt[i] > bt[j]) {
swap(&bt[i], &bt[j]);
swap(&p[i], &p[j]);
}
}
}
// Turnaround Time
for(i = 0; i < n; i++) {
tat[i] = (i == 0) ? bt[i] : tat[i - 1] + bt[i];
tot_tat += tat[i];
}
// Waiting Time
wt[0] = 0;
for(i = 1; i < n; i++) {
wt[i] = wt[i - 1] + bt[i - 1];
tot_wt += wt[i];
}
// Output
printf("\nPROCESS\tBURST TIME\tTURNAROUND TIME\tWAITING TIME\n");
for(i = 0; i < n; i++)

printf("P[%d]\t\t%d\t\t%d\t\t%d\n", p[i] + 1, bt[i], tat[i], wt[i]);
avg_tat = (float)tot_tat / n;
avg_wt = (float)tot_wt / n;
printf("\nTotal Turnaround Time: %d", tot_tat);
printf("\nAverage Turnaround Time: %.2f", avg_tat);
printf("\nTotal Waiting Time: %d", tot_wt);
printf("\nAverage Waiting Time: %.2f\n", avg_wt);
return 0;
}
void swap(int *a, int *b) {
int temp = *a;
*a = *b;
*b = temp;
}




exp6c > pr

 #include <stdio.h> // Standard Input-Output library
// Function to swap two integer values

void swap(int *a, int *b) {
int temp = *a;
*a = *b;
*b = temp;
}
int main() {
// Declare necessary variables
int i, j, n;
int p[30], bt[30], pr[30], tat[30], wt[30];
int tot_tat = 0, tot_wt = 0;
float avg_tat, avg_wt;
// Prompt user to enter the number of processes
printf("\nEnter the number of processes: ");
scanf("%d", &n);
// Loop to take input for burst time and priority for each process
for (i = 0; i < n; i++) {
printf("Enter burst time and priority of process[%d]: ", i + 1);
scanf("%d%d", &bt[i], &pr[i]); // Read burst time and priority
p[i] = i + 1; // Assign process number (1-based indexing for display)
}
// Sorting processes based on priority (lower value = higher priority)
for (i = 0; i < n - 1; i++) {
for (j = i + 1; j < n; j++) {
if (pr[i] > pr[j])
{ // Swap if priority of current is higher
swap(&pr[i], &pr[j]);
swap(&bt[i], &bt[j]);
swap(&p[i], &p[j]);
}
}
}
// Calculate Waiting Time (WT) and Turnaround Time (TAT)
wt[0] = 0; // First process has 0 waiting time
tat[0] = bt[0]; // First process TAT = its burst time
tot_tat = tat[0];
for (i = 1; i < n; i++) {
wt[i] = wt[i - 1] + bt[i - 1]; // Waiting Time = previous WT + previous BT
tat[i] = wt[i] + bt[i]; // Turnaround Time = Waiting Time + Burst Time
tot_wt += wt[i]; // Sum total waiting time
tot_tat += tat[i]; // Sum total turnaround time

}
// Compute average values
avg_wt = (float)tot_wt / n;
avg_tat = (float)tot_tat / n;
// Print Process Details
printf("\nPROCESS\t\tBURST TIME\tPRIORITY\tWAITING TIME\tTURNAROUND TIME");
for (i = 0; i < n; i++) {
printf("\nProcess[%d]\t\t%d\t\t%d\t\t%d\t\t%d", p[i], bt[i], pr[i], wt[i], tat[i]);
}
// Print total and average turnaround and waiting times
printf("\n\nTotal Turnaround Time: %d", tot_tat);
printf("\nAverage Turnaround Time: %.2f", avg_tat);
printf("\nTotal Waiting Time: %d", tot_wt);
printf("\nAverage Waiting Time: %.2f\n", avg_wt);
return 0;
}



exp6d > RR


 #include<stdio.h>
int main() {
    int i, limit, total = 0, x, counter = 0, time_quantum;
    int wait_time = 0, turnaround_time = 0, burst_time[10], temp[10];
    float average_wait_time, average_turnaround_time;

    // Input total number of processes
    printf("\nEnter Total Number of Processes:\t");
    scanf("%d", &limit);
    x = limit;

    // Input burst times for each process
    for(i = 0; i < limit; i++) {
        printf("\nEnter Details of Process[%d]\n", i + 1);
        printf("Burst Time:\t");
        scanf("%d", &burst_time[i]);
        temp[i] = burst_time[i];  // Copy burst time to temp for tracking
    }

    // Input time quantum
    printf("\nEnter Time Quantum:\t");
    scanf("%d", &time_quantum);
    
    // Print header for the process table
    printf("\nProcess ID\t\tBurst Time\t Turnaround Time\t Waiting Time\n");

    // Round Robin Scheduling loop
    for(total = 0, i = 0; x != 0;) {
        if(temp[i] <= time_quantum && temp[i] > 0) {
            total = total + temp[i]; // Add remaining burst time to total time
            temp[i] = 0; // Process is completed
            counter = 1;
        }
        else if(temp[i] > 0) {
            temp[i] = temp[i] - time_quantum; // Reduce burst time by time quantum
            total = total + time_quantum; // Update total time
        }

        // If process is completed
        if(temp[i] == 0 && counter == 1) {
            x--; // Decrease remaining processes
            printf("\nProcess[%d]\t\t%d\t\t %d\t\t\t %d", i + 1, burst_time[i], total, total - burst_time[i]);
            wait_time = wait_time + total - burst_time[i]; // Add waiting time
            turnaround_time = turnaround_time + total; // Add turnaround time
            counter = 0; // Reset counter
        }

        // Move to the next process in a circular manner
        if(i == limit - 1) {
            i = 0; // Wrap around to the first process
        }
        else {
            i++; // Move to the next process
        }
    }

    // Calculate average waiting time and turnaround time
    average_wait_time = wait_time * 1.0 / limit;
    average_turnaround_time = turnaround_time * 1.0 / limit;

    // Display the results
    printf("\n\nAverage Waiting Time:\t%f", average_wait_time);
    printf("\nAvg Turnaround Time:\t%f\n", average_turnaround_time);
    return 0;
}


exp 7 -> sema

#include <stdio.h>
#include <stdlib.h> // Include stdlib.h for exit()
int mutex = 1, full = 0, empty = 3, x = 0; // Initialize semaphores and item counter

void producer(); // Function prototype for producer
void consumer(); // Function prototype for consumer
int wait(int); // Function prototype for wait operation
int signal(int); // Function prototype for signal operation

int main() {
    int n; // Variable for user choice

    printf("\n1. PRODUCER\n2. CONSUMER\n3. EXIT\n"); // Print menu

    while (1) // Infinite loop for menu
    {
        printf("\nENTER YOUR CHOICE\n"); // Prompt for choice
        scanf("%d", &n); // Read user choice
        switch (n) // Switch based on choice
        {
        case 1: // Producer case
            if ((mutex == 1) && (empty != 0)) // Check if mutex is available and buffer not full
                producer(); // Call producer function
            else
                printf("BUFFER IS FULL\n"); // Buffer full message
            break;
        case 2: // Consumer case
            if ((mutex == 1) && (full != 0)) // Check if mutex is available and buffer not empty
                consumer(); // Call consumer function
            else
                printf("BUFFER IS EMPTY\n"); // Buffer empty message
            break;
        case 3: // Exit case
            exit(0); // Exit program
            break;
        }
    }

    return 0;
}

int wait(int s) // Wait function (decrement semaphore)
{
    return (--s); // Decrement and return
}

int signal(int s) // Signal function (increment semaphore)
{
    return (++s); // Increment and return
}

void producer() // Producer function
{
    mutex = wait(mutex); // Acquire mutex lock
    full = signal(full); // Increment full count
    empty = wait(empty); // Decrement empty count
    x++; // Increment item counter
    printf("\nProducer produces the item %d\n", x); // Print production message
    mutex = signal(mutex); // Release mutex lock
}

void consumer() // Consumer function
{
    mutex = wait(mutex); // Acquire mutex lock
    full = wait(full); // Decrement full count
    empty = signal(empty); // Increment empty count
    printf("\nConsumer consumes item %d\n", x); // Print consumption message
    x--; // Decrement item counter
    mutex = signal(mutex); // Release mutex lock
}







exp 8 a

#include <stdio.h>
#define max 25
int main() {
int frag[max], b[max], f[max], i, j, nb, nf, temp;
static int bf[max], ff[max]; // bf: block flag, ff: file allocation block
printf("\n\tMemory Management Scheme - First Fit");
printf("\nEnter the number of blocks:");
scanf("%d", &nb); // Read the number of memory blocks
printf("Enter the number of files:");
scanf("%d", &nf); // Read the number of files to allocate
printf("\nEnter the size of the blocks:-\n");
for (i = 1; i <= nb; i++) {
printf("Block %d:", i);
scanf("%d", &b[i]); // Read the size of each memory block
}
printf("Enter the size of the files :-\n");
for (i = 1; i <= nf; i++) {
printf("File %d:", i);
scanf("%d", &f[i]); // Read the size of each file
}
// First Fit Allocation Logic
for (i = 1; i <= nf; i++) { // Iterate through each file
ff[i] = 0; // Initialize ff[i] to 0, indicating no block allocated yet
frag[i] = 0; // Initialize fragment size to 0
for (j = 1; j <= nb; j++) { // Iterate through each memory block
if (bf[j] != 1) { // Check if the block is not already allocated
temp = b[j] - f[i]; // Calculate the remaining space if file i is allocated to block j
if (temp >= 0) { // Check if the block has enough space for the file
ff[i] = j; // Allocate file i to block j
frag[i] = temp; // Store the fragmentation size
bf[j] = 1; // Mark block j as allocated
break; // Exit the inner loop since a suitable block is found
}
}
}
}
// Print the allocation results
printf("\nFile_no:\tFile_size :\tBlock_no:\tBlock_size:\tFragement");
for (i = 1; i <= nf; i++) {
printf("\n%d\t\t%d\t\t%d\t\t%d\t\t%d ", i, f[i], ff[i], b[ff[i]], frag[i]);
}
return 0;
}





exp 8b


/* Worst Fit */
#include <stdio.h>
#define max 25
int main() {
int frag[max], b[max], f[max], i, j, nb, nf, temp, largest; // Added 'largest' for Worst Fit logic
static int bf[max], ff[max];
printf("\n\tMemory Management Scheme - Worst Fit");
printf("\nEnter the number of blocks:");
scanf("%d", &nb);
printf("Enter the number of files:");
scanf("%d", &nf);
printf("\nEnter the size of the blocks:-\n");
for (i = 1; i <= nb; i++) {
printf("Block %d:", i);
scanf("%d", &b[i]);
}
printf("Enter the size of the files :-\n");
for (i = 1; i <= nf; i++) {
printf("File %d:", i);
scanf("%d", &f[i]);
}
for (i = 1; i <= nf; i++) { // For each file
largest = -1; // Initialize largest fragment to -1
ff[i] = 0; // Initialize file allocation to 0
frag[i] = 0; //initialize fragment to 0
for (j = 1; j <= nb; j++) { // For each block
if (bf[j] != 1) { // If block is free
temp = b[j] - f[i]; // Calculate remaining space
if (temp >= 0) { // If block can hold the file
if (largest == -1 || temp > largest) { // Find the block with the largest remaining space
largest = temp;
ff[i] = j; // Store the block number
frag[i] = temp; //Store fragment value
}
}
}
}
if(ff[i] != 0){ // if a block was allocated
bf[ff[i]] = 1; // Mark the allocated block as used.
}
}
printf("\nFile_no:\tFile_size:\tBlock_no:\tBlock_size:\tFragment");
for (i = 1; i <= nf; i++) {
printf("\n%d\t\t%d\t\t%d\t\t%d\t\t%d", i, f[i], ff[i], b[ff[i]], frag[i]);
}
return 0;
}



exp 8c


/* Best Fit */
#include <stdio.h>
#define max 25
int main() {
int frag[max], b[max], f[max], i, j, nb, nf, temp, lowest; // Removed highest, added lowest
int bf[max], ff[max];
printf("\n\tMemory Management Scheme - Best Fit");
printf("\nEnter the number of blocks:");
scanf("%d", &nb);
printf("Enter the number of files:");
scanf("%d", &nf);
printf("\nEnter the size of the blocks:-\n");
for (i = 1; i <= nb; i++) {
printf("Block %d:", i);
scanf("%d", &b[i]);
}
printf("Enter the size of the files :-\n");
for (i = 1; i <= nf; i++) {
printf("File %d:", i);
scanf("%d", &f[i]);
}
for (i = 1; i <= nf; i++) { // For each file
lowest = 10000; // Initialize lowest to a large value
ff[i] = 0; // Initialize file allocation to 0
frag[i] = 0; //initialize fragment to 0
for (j = 1; j <= nb; j++) { // For each block
if (bf[j] != 1) { // If block is free
temp = b[j] - f[i]; // Calculate remaining space
if (temp >= 0) { // If block can hold the file
if (lowest > temp) { // Find the block with the smallest remaining space
ff[i] = j; // Store the block
lowest = temp; // Update lowest
frag[i] = temp; //store fragment value.
}
}
}
}
if (ff[i] != 0){ //If a block was allocated
bf[ff[i]] = 1; // Mark the allocated block as used
}
}
printf("\nFile No\tFile Size\tBlock No\tBlock Size\tFragment");
for (i = 1; i <= nf; i++) {
if(ff[i] != 0) { // check if a block was allocated.
printf("\n%d\t\t%d\t\t%d\t\t%d\t\t%d", i, f[i], ff[i], b[ff[i]], frag[i]);
}
}
return 0;
}



exp 9


#include <stdio.h>
int main() {
    int avail[10], alloc[10][10], max[10][10], need[10][10], maxres[10];
    int finish[10], safeseq[10];
    int m, n, i, j, k, sum, ind = 0, executed_processes = 0;
    printf("\nEnter the number of processes and the number of resources: ");
    scanf("%d%d", &n, &m);
    printf("\nEnter maximum instances of resources: \n");
    for (j = 0; j < m; j++) {
        scanf("%d", &maxres[j]);
        avail[j] = maxres[j];
    }
    printf("\nEnter the Allocated Matrix: \n");
    for (i = 0; i < n; i++) {
        for (j = 0; j < m; j++) {
            scanf("%d", &alloc[i][j]);
        }
    }
    printf("\nEnter the Max Matrix: \n");
    for (i = 0; i < n; i++) {
        for (j = 0; j < m; j++) {
            scanf("%d", &max[i][j]);
            need[i][j] = max[i][j] - alloc[i][j];
        }
    }
    printf("\nThe Need Matrix is:\n");
    for (i = 0; i < n; i++) {
        for (j = 0; j < m; j++) {
            printf("%d ", need[i][j]);
        }
        printf("\n");
    }
    for (j = 0; j < m; j++) {
        sum = 0;
        for (i = 0; i < n; i++) {
            sum += alloc[i][j];
        }
        avail[j] -= sum;
    }
    for (i = 0; i < n; i++) {
        finish[i] = 0;
    }
    int flag = 1;
    while (executed_processes < n && flag) {
        flag = 0;
        for (i = 0; i < n; i++) {
            if (finish[i] == 0) {
                int canExecute = 1;
                for (j = 0; j < m; j++) {
                    if (need[i][j] > avail[j]) {
                        canExecute = 0;
                        break;
                    }
                }
                if (canExecute) {
                    safeseq[ind++] = i;
                    for (j = 0; j < m; j++) {
                        avail[j] += alloc[i][j];
                    }
                    finish[i] = 1;
                    executed_processes++;
                    flag = 1;
                }
            }
        }
    }
    if (executed_processes < n) {
        printf("\n System is in an unsafe state. Deadlock may occur.\n");
        return 0;
    }
    printf("\nFollowing is the SAFE Sequence:\n");
    for (i = 0; i < n - 1; i++) {
        printf(" P%d ->", safeseq[i]);
    }
    printf(" P%d\n", safeseq[n - 1]);
    return 0;
}






